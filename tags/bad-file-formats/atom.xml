<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title> - bad file formats</title>
	<link href="https://zacxalot.github.io/tags/bad-file-formats/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://zacxalot.github.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2023-02-10T00:00:00+00:00</updated>
	<id>https://zacxalot.github.io/tags/bad-file-formats/atom.xml</id>
	<entry xml:lang="en">
		<title>STEP File Parsing (In Rust 😉)</title>
		<published>2023-02-10T00:00:00+00:00</published>
		<updated>2023-02-10T00:00:00+00:00</updated>
		<link rel="alternate" href="https://zacxalot.github.io/step/4-express-parser/" type="text/html"/>
		<id>https://zacxalot.github.io/step/4-express-parser/</id>
		<content type="html">&lt;script type=&quot;module&quot; src=&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;@google&#x2F;model-viewer&#x2F;dist&#x2F;model-viewer.min.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;p&gt;This is a bit different from the stuff I&#x27;ve been posting about so far.
By &amp;quot;a bit different&amp;quot; I mean this isn&#x27;t about Blender, but it is still about 3D data structures involving Rust, so that &amp;quot;bit&amp;quot; really is just a &amp;quot;bit&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;At work, we deal with lots of CAD data in &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;ISO_10303-21&quot;&gt;STEP&lt;&#x2F;a&gt; format. These STEP files contain all the data needed to define 3D parts. On top of this, they hold definitions for assemblies  and, depending on the version of the format you have, can also include information regarding the colour of parts (which is particularly interesting to the company). Painfully though, it still seems like a lot of information, such as part materials, that is available in native CAD data, is lost when converted into STEP. Everything that STEP is capable of is laid out in &lt;a href=&quot;https:&#x2F;&#x2F;www.iso.org&#x2F;standard&#x2F;84667.html&quot;&gt;ISO standard 10303&lt;&#x2F;a&gt;, but I&#x27;m not abouts to spend 145 of my hard-earned Swiss Francs on something I can enjoy guessing about, so that&#x27;s why I&#x27;m here.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chronic-step-pain&quot;&gt;Chronic Step Pain&lt;&#x2F;h2&gt;
&lt;p&gt;When I think of a CAD file, I imagine a super dense binary file with high precision parameters defining the placement of each edge, face, curve and corner. For the most part, this is an accurate assumption. FreeCAD for example stores it&#x27;s data like this, just a big old heap of bits. This is great, humans don&#x27;t need to and definately don&#x27;t want to read CAD data in its raw format. By the same merit, humans &lt;i&gt;do&lt;&#x2F;i&gt; want the software they use to interact with their CAD to be able to read the data super quick.&lt;&#x2F;p&gt;
&lt;p&gt;This is where STEP enters the ring. If you open up a STEP file in a text editor, you are met with a nasty surprise. It&#x27;s all in ASCII. What the hell? Who dreamt this disaster up? Here&#x27;s an example just in case you didn&#x27;t believe me or don&#x27;t have one to hand.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;ISO-10303-21;
&lt;&#x2F;span&gt;&lt;span&gt;HEADER;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;* Generated by software containing ST-Developer
&lt;&#x2F;span&gt;&lt;span&gt; * from STEP Tools, Inc. (www.steptools.com) 
&lt;&#x2F;span&gt;&lt;span&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;FILE_DESCRIPTION(
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;* description *&#x2F; (&amp;#39;&amp;#39;),
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;* implementation_level *&#x2F; &amp;#39;2;1&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;FILE_NAME(
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;* name *&#x2F; &amp;#39;Asm v2.step&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;* time_stamp *&#x2F; &amp;#39;2023-02-09T22:05:44Z&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;* author *&#x2F; (&amp;#39;&amp;#39;),
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;* organization *&#x2F; (&amp;#39;&amp;#39;),
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;* preprocessor_version *&#x2F; &amp;#39;ST-DEVELOPER v19.2&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;* originating_system *&#x2F; &amp;#39;Autodesk Translation Framework v11.17.0.187&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;* authorisation *&#x2F; &amp;#39;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;FILE_SCHEMA ((&amp;#39;AUTOMOTIVE_DESIGN { 1 0 10303 214 3 1 1 }&amp;#39;));
&lt;&#x2F;span&gt;&lt;span&gt;ENDSEC;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;DATA;
&lt;&#x2F;span&gt;&lt;span&gt;#10=MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION(&amp;#39;&amp;#39;,(#21),#3284);
&lt;&#x2F;span&gt;&lt;span&gt;#11=ITEM_DEFINED_TRANSFORMATION($,$,#827,#869);
&lt;&#x2F;span&gt;&lt;span&gt;#12=ITEM_DEFINED_TRANSFORMATION($,$,#827,#870);
&lt;&#x2F;span&gt;&lt;span&gt;#13=(
&lt;&#x2F;span&gt;&lt;span&gt;REPRESENTATION_RELATIONSHIP($,$,#3296,#3295)
&lt;&#x2F;span&gt;&lt;span&gt;REPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION(#11)
&lt;&#x2F;span&gt;&lt;span&gt;SHAPE_REPRESENTATION_RELATIONSHIP()
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, there&#x27;s a bunch of metadata at the top, which is perfectly fine, you&#x27;ve got to put that stuff somewhere right. But the pain kicks in when you hit the &lt;code&gt;DATA&lt;&#x2F;code&gt; section towards the bottom. This is where all of our shapes, assemblies and colour lies, defined in a semicolon separated list of numbered tags, each with varying numbers of parameters. These lines then reference other lines using &lt;code&gt;#&lt;&#x2F;code&gt; symbols making it quite difficult to make your way around as a human with a text editor. This is where my annoyance hits its peak. If you&#x27;re going to make a file format that&#x27;s human readable, at least make it readable to the point where it&#x27;s useful. The sacrafice of not using binary is completely wasted othewise.&lt;&#x2F;p&gt;
&lt;p&gt;In the file I showed a snippet of up there, there&#x27;s another 3000 lines of &amp;quot;DATA&amp;quot;, I don&#x27;t want to kid you into thinking that STEP is super dense after all. In fact, as you probably have guessed, it&#x27;s terrible at that too! The step file for the model shown below has a filesize of 254kb, wheras the FreeCAD file (created using the STEP file) is only 59kb.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;model-viewer 
    src=&quot;asm.glb&quot;
    environment-image=&quot;bank_vault_1k.hdr&quot;
    ios-src=&quot;asm.glb&quot;
    alt=&quot;3D render of 2 cad parts assembled together&quot;
    rotation-per-second=&quot;32&quot;
    shadow-intensity=&quot;1&quot;
    camera-controls
    auto-rotate ar
    style=&quot;width:100%;height: 75vh; border-radius:15px;&quot;
&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The STEP file format is regarded by many as poor as far as I&#x27;m aware, just look at &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;ISO_10303-21#Criticism&quot;&gt;the wikipedia page for its not so gleaming reputation&lt;&#x2F;a&gt;. I&#x27;m definately not a fan.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;doing-bits&quot;&gt;Doing Bits&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ve had my rant now and I feel like a new man, less complaining from now on. So, I&#x27;ve written a very basic parser for the STEP file format, which is based on the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;EXPRESS_(data_modeling_language)&quot;&gt;EXPRESS&lt;&#x2F;a&gt; schema. As I&#x27;ve said earlier, I&#x27;ve not purchased the ISO document that defines STEP, which sets me off to a bad start. I also think it&#x27;s important to mention that this parser is far from complete. I&#x27;ve got it working with a few STEP files, but I&#x27;m sure there&#x27;s all kinds of funky edge cases I&#x27;ve missed.&lt;&#x2F;p&gt;
&lt;p&gt;For parsing, I&#x27;ve used the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;nom#streaming-formats&quot;&gt;nom&lt;&#x2F;a&gt; library. It&#x27;s a bit difficult to get your head around at first, but once you get the hang of it it&#x27;s extremely powerful. This is the function that parses a single line of data. It takes in a &lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt; and if the parsing is a success, it returns an &lt;code&gt;Ok&lt;&#x2F;code&gt; &lt;code&gt;IResult&lt;&#x2F;code&gt; containing the rest of the file yet to be parsed as well as a parsed DataLine object. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;DataLine&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chunks&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;Chunk&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;data_line&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; IResult&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, DataLine&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Take only a single line, up to the semicolon
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(remaining, line) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;take_until&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)(input)?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(next_line, _) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;take&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;usize&lt;&#x2F;span&gt;&lt;span&gt;)(remaining)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Take the # off the front
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(line, _) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)(line)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Get the digits inbetween&amp;quot;# and =
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(line, number) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;take_until&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)(line)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Eat the =
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(line, _) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)(line)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Turn the remaining text into chunks
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(_, chunks) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_chunks&lt;&#x2F;span&gt;&lt;span&gt;(line)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; data_line: DataLine = DataLine {
&lt;&#x2F;span&gt;&lt;span&gt;        number: number.parse::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        chunks,
&lt;&#x2F;span&gt;&lt;span&gt;    };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok((next_line, data_line))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You&#x27;ll notice that on each line that we use a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-bakery&#x2F;nom&#x2F;blob&#x2F;main&#x2F;doc&#x2F;choosing_a_combinator.md&quot;&gt;combinator&lt;&#x2F;a&gt;, we unwrap the result with a &lt;code&gt;?&lt;&#x2F;code&gt;. This means if the combinator failed, the error will get bubbled up and depending on how the original function was called nom can handle the result differently. For example, the combinator that is calling our &lt;code&gt;data_line&lt;&#x2F;code&gt; function is a &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;nom&#x2F;latest&#x2F;nom&#x2F;multi&#x2F;fn.many1.html&quot;&gt;&lt;code&gt;many1&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, which will keep running a combinator on the returned remaining data until it returns an error, at which point it will return all the data it managed to parse as a &lt;code&gt;Vec&lt;&#x2F;code&gt;. This is perfect for us as we want to keep parsing lines until we hit something we can&#x27;t parse as a data line, such as an &lt;code&gt;ENDSEC;&lt;&#x2F;code&gt; which breaks up sections in STEP.&lt;&#x2F;p&gt;
&lt;p&gt;With this so far we have parsed the &lt;code&gt;#13=&lt;&#x2F;code&gt; and the trailing &lt;code&gt;;&lt;&#x2F;code&gt; out of this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;#13=(
&lt;&#x2F;span&gt;&lt;span&gt;REPRESENTATION_RELATIONSHIP($,$,#3296,#3295)
&lt;&#x2F;span&gt;&lt;span&gt;REPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION(#11)
&lt;&#x2F;span&gt;&lt;span&gt;SHAPE_REPRESENTATION_RELATIONSHIP()
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Leaving just this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;REPRESENTATION_RELATIONSHIP($,$,#3296,#3295)
&lt;&#x2F;span&gt;&lt;span&gt;REPRESENTATION_RELATIONSHIP_WITH_TRANSFORMATION(#11)
&lt;&#x2F;span&gt;&lt;span&gt;SHAPE_REPRESENTATION_RELATIONSHIP()
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;to get sent to the &lt;code&gt;to_chunks&lt;&#x2F;code&gt; combinator.&lt;&#x2F;p&gt;
&lt;p&gt;Because I don&#x27;t know the official names of anything in here, I decided to call these things &lt;code&gt;REPRESENTATION_RELATIONSHIP($,$,#3296,#3295)&lt;&#x2F;code&gt; chunks. &lt;code&gt;to_chunks&lt;&#x2F;code&gt; then uses the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;nom&#x2F;latest&#x2F;nom&#x2F;branch&#x2F;fn.alt.html&quot;&gt;&lt;code&gt;alt&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; combinator to get the chunks that make up a line (sometimes a single line holds a few, such as the one in the example above).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span&gt;(Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Chunk&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;elements&lt;&#x2F;span&gt;&lt;span&gt;: Vec&amp;lt;Element&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;to_chunks&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; IResult&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, Vec&amp;lt;Chunk&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;alt&lt;&#x2F;span&gt;&lt;span&gt;((delimited_chunks, single_chunk_as_vec))(input)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;single_chunk_as_vec&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; IResult&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, Vec&amp;lt;Chunk&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(remaining, chunk) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;single_chunk&lt;&#x2F;span&gt;&lt;span&gt;(input)?;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok((remaining, vec![chunk]))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;single_chunk&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; IResult&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, Chunk&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Find the tag
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(line, tag_value) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;take_until&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)(input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;trim&lt;&#x2F;span&gt;&lt;span&gt;())?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Optionally grab the list of elements
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(line, elements) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;opt&lt;&#x2F;span&gt;&lt;span&gt;(delimited_elements)(line)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok((
&lt;&#x2F;span&gt;&lt;span&gt;        line,
&lt;&#x2F;span&gt;&lt;span&gt;        Chunk {
&lt;&#x2F;span&gt;&lt;span&gt;            tag: tag_value,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; If there were no elements, just return vec![]
&lt;&#x2F;span&gt;&lt;span&gt;            elements: elements.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or_default&lt;&#x2F;span&gt;&lt;span&gt;(),
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;    ))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;delimited_chunks&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; IResult&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, Vec&amp;lt;Chunk&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(remaining, chunks) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;delimited&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;many0&lt;&#x2F;span&gt;&lt;span&gt;(single_chunk), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;))(input)?;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok((remaining, chunks))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Everything here ultimately relies on the &lt;code&gt;single_chunk&lt;&#x2F;code&gt; combinator.&lt;&#x2F;p&gt;
&lt;p&gt;At this point we have parsed &lt;code&gt;REPRESENTATION_RELATIONSHIP($,$,#3296,#3295)&lt;&#x2F;code&gt; to give us &lt;code&gt;REPRESENTATION_RELATIONSHIP&lt;&#x2F;code&gt; as the tag and &lt;code&gt;($,$,#3296,#3295)&lt;&#x2F;code&gt; to pass into our &lt;code&gt;delimited_elements&lt;&#x2F;code&gt; combinator.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;delimited_elements&lt;&#x2F;code&gt; combinator makes use of the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;nom&#x2F;latest&#x2F;nom&#x2F;sequence&#x2F;fn.delimited.html&quot;&gt;&lt;code&gt;delimited&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and the  &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;nom&#x2F;latest&#x2F;nom&#x2F;multi&#x2F;fn.separated_list0.html&quot;&gt;&lt;code&gt;separated_list0&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; combinators to call the &lt;code&gt;element&lt;&#x2F;code&gt; function on each comma separated value, in between a pair of brackets.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span&gt;Element&amp;lt;&amp;#39;a&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    Reference(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    Dollar,
&lt;&#x2F;span&gt;&lt;span&gt;    Asterisk,
&lt;&#x2F;span&gt;&lt;span&gt;    Elements(Vec&amp;lt;Element&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    String(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    DotString(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a str&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    Float(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f64&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    Integer(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    Chunk(Chunk&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;),
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;delimited_elements&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; IResult&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, Vec&amp;lt;Element&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;delimited&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;separated_list0&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), element), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;))(input)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;element&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; IResult&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, Element&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;alt&lt;&#x2F;span&gt;&lt;span&gt;((
&lt;&#x2F;span&gt;&lt;span&gt;        reference,
&lt;&#x2F;span&gt;&lt;span&gt;        dollar,
&lt;&#x2F;span&gt;&lt;span&gt;        asterisk,
&lt;&#x2F;span&gt;&lt;span&gt;        nested_elements,
&lt;&#x2F;span&gt;&lt;span&gt;        string,
&lt;&#x2F;span&gt;&lt;span&gt;        dot_string,
&lt;&#x2F;span&gt;&lt;span&gt;        float,
&lt;&#x2F;span&gt;&lt;span&gt;        integer,
&lt;&#x2F;span&gt;&lt;span&gt;        chunk,
&lt;&#x2F;span&gt;&lt;span&gt;    ))(input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;trim&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;element&lt;&#x2F;code&gt; function makes use of the &lt;code&gt;alt&lt;&#x2F;code&gt; to try each possible element type and then jam it into an Element enum. I won&#x27;t go through every element parser I wrote, but here are a few for you to get an idea of what they do. If you want the whole thing, the source code is available &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Zacxalot&#x2F;express-parse&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;reference&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; IResult&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, Element&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(line, _) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)(input)?;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(remaining, number) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;digit1&lt;&#x2F;span&gt;&lt;span&gt;(line)?;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok((
&lt;&#x2F;span&gt;&lt;span&gt;        remaining,
&lt;&#x2F;span&gt;&lt;span&gt;        Element::Reference(number.parse::&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;()),
&lt;&#x2F;span&gt;&lt;span&gt;    ))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;dollar&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; IResult&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, Element&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(remaining, _) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)(input)?;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok((remaining, Element::Dollar))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; IResult&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, Element&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;(remaining, string_value) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;delimited&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;take_until&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))(input)?;
&lt;&#x2F;span&gt;&lt;span&gt;    Ok((remaining, Element::String(string_value)))
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And just like that, we&#x27;re done. Well, we&#x27;re not done because I&#x27;m sure there&#x27;s plenty of examples of STEP files that won&#x27;t work with it, but it does work for my step files, so I&#x27;m happy for now. The first improvement to make would probably to stick some more &lt;code&gt;.trim&lt;&#x2F;code&gt;&#x27;s around the place just to take out some whitespace. It would also be nice to have a unit test for each of the combinators which would be quite easy and satisfying to do.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;serde-json-and-binary&quot;&gt;Serde, JSON and Binary&lt;&#x2F;h2&gt;
&lt;p&gt;Because it&#x27;s easy to, I decided to serialise the resulting data structure into json which comes out looking like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;chunks&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tag&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;MECHANICAL_DESIGN_GEOMETRIC_PRESENTATION_REPRESENTATION&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;elements&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;                    {
&lt;&#x2F;span&gt;&lt;span&gt;                        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;                    },
&lt;&#x2F;span&gt;&lt;span&gt;                    {
&lt;&#x2F;span&gt;&lt;span&gt;                        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Elements&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;                            {
&lt;&#x2F;span&gt;&lt;span&gt;                                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Reference&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;21
&lt;&#x2F;span&gt;&lt;span&gt;                            }
&lt;&#x2F;span&gt;&lt;span&gt;                        ]
&lt;&#x2F;span&gt;&lt;span&gt;                    },
&lt;&#x2F;span&gt;&lt;span&gt;                    {
&lt;&#x2F;span&gt;&lt;span&gt;                        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Reference&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3284
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                ]
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        ]
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;...&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Just as bad as STEP, now usable in every programming language you can think of... and 3x the file size 😝. It is however probably a little nicer to work with now that you have all the tools you&#x27;d normally have for looking at json at your disposal such as JsonPath. Because of the nature of the data structure, this json is &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Marshalling_(computer_science)&quot;&gt;marshalled&lt;&#x2F;a&gt;, in a similar way to how DynamoDB records are, which is a bit awkward. There&#x27;s probably a way of dealing with this marshalling using serde, I just don&#x27;t care enough to investigate it right now.&lt;&#x2F;p&gt;
&lt;p&gt;Also, because it&#x27;s easy to do, I decided to encode and compress the resulting data structure using &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;bincode&quot;&gt;&lt;code&gt;bincode&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;flate2&quot;&gt;&lt;code&gt;flate2&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, and ended up with a file only 44kb big 🥳. I&#x27;m not counting this as a win over FreeCAD though, I&#x27;m sure that&#x27;s much more efficient and stores way more data that what I&#x27;m doing. Still, pretty cool compared to the STEP file&#x27;s 254kb.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I don&#x27;t know what compelled me to reccomend a song in my last post, but I think it&#x27;s fun, so I&#x27;m going to carry on with it.&lt;&#x2F;p&gt;
&lt;p&gt;This is &lt;code&gt;Caroline Polachek&#x27;s&lt;&#x2F;code&gt; remix of &lt;code&gt;Oh Yeah&lt;&#x2F;code&gt; by &lt;code&gt;A.G. Cook&lt;&#x2F;code&gt;. Probably not for everyone this, but I think it&#x27;s a really fun song. The original version feels a bit dead after listening to the remix, but you can pretend it doesn&#x27;t exist. Enjoy!
&lt;iframe style=&quot;border-radius:12px&quot; src=&quot;https:&amp;#x2F;&amp;#x2F;open.spotify.com&amp;#x2F;embed&amp;#x2F;track&amp;#x2F;2tPN4TxN7ZYlSggqU7IENd?utm_source=generator&quot; width=&quot;100%&quot; height=&quot;152&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot;
    allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot; loading=&quot;lazy&quot;&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
